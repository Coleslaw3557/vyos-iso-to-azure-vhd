packer {
  required_plugins {
    qemu = {
      version = ">= 1.0.10"
      source  = "github.com/hashicorp/qemu"
    }
  }
}

variable "iso_url" {
  type    = string
  default = "file://{{ artifacts_folder }}/{{ iso_folder }}/{{ vyos_rolling_iso }}"
}

variable "iso_checksum" {
  type    = string
  default = "{{ iso_checksum }}"
}

variable "output_dir" {
  type    = string
  default = "{{ artifacts_folder }}/{{ images_folder }}"
}

variable "image_name" {
  type    = string
  default = "{{ packer_vyos_image }}"
}

source "qemu" "vyos_rolling" {
  iso_url          = var.iso_url
  iso_checksum     = var.iso_checksum
  communicator     = "ssh"
  ssh_username     = "{{ vm_username }}"
  ssh_password     = "{{ vm_password }}"
  ssh_timeout      = "20m"
  ssh_handshake_attempts = 100
  disk_size        = "20G"
  format           = "qcow2"
  memory           = 2048
  cpus             = 2
  headless         = true
  accelerator      = "kvm"
  vm_name          = var.image_name
  net_device       = "virtio-net"
  disk_interface   = "virtio"
  vnc_bind_address = "0.0.0.0"
  http_directory   = "{{ playbook_dir }}/http"
  boot_wait        = "90s"
  qemuargs         = [
    ["-serial", "file:{{ artifacts_folder }}/serial.log"]
  ]
  boot_command     = [
    "<wait5>",
    "vyos<enter><wait>",
    "vyos<enter><wait3>",
    "configure<enter><wait>",
    "set interfaces ethernet eth0 address 'dhcp'<enter><wait>",
    "set system name-server '8.8.8.8'<enter><wait>",
    "set service ssh port '22'<enter><wait>",
    "commit<enter><wait2s>",
    "save<enter><wait2s>",
    "exit<enter><wait>",
    "install image<enter><wait>",
    "y<enter><wait>",
    "<enter><wait>",
    "vyos<enter><wait>",
    "vyos<enter><wait>",
    "<enter><wait10>",
    "<enter><wait>",
    "y<enter><wait>",
    "Y<enter><wait5>",
    "<enter><wait90>",
    "reboot<enter><wait>",
    "y<enter>"
  ]
  output_directory = var.output_dir
  shutdown_command = "sudo poweroff"
}

build {
  sources = ["source.qemu.vyos_rolling"]

  # Upload provisioning scripts
  provisioner "shell" {
    inline = [
      "mkdir -p /tmp/vyos"
    ]
  }

  provisioner "file" {
    source      = "{{ playbook_dir }}/scripts/vyos/"
    destination = "/tmp/vyos/"
  }

  # Make scripts executable
  provisioner "shell" {
    inline = [
      "sudo chmod +x /tmp/vyos/*.sh"
    ]
  }

  # Initialize machine-id and prepare environment
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/init.sh"
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Configure APT repositories (needed for both waagent and cloud-init)
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/apt-repo-debian.sh"
    environment_vars = [
      "CLOUD_INIT=debian",
      "VYOS_RELEASE={{ vyos_release }}"
    ]
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Install cloud-init packages (handles provisioning)
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/cloud-init-{{ cloud_init_source }}.sh"
    environment_vars = [
      "CLOUD_INIT={{ cloud_init_source }}",
      "VYOS_RELEASE={{ vyos_release }}"
    ]
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Configure cloud-init datasource for Azure
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/cloud-init-datasource.sh"
    environment_vars = [
      "CLOUD_INIT={{ cloud_init_source }}",
      "CLOUD_INIT_DATASOURCE=azure"
    ]
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Configure cloud-init to wait for VyOS router service
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/cloud-init-wait-vyos.sh"
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Configure VyOS-specific cloud-init modules
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/cloud-init-vyos-modules.sh"
    environment_vars = [
      "CLOUD_INIT={{ cloud_init_source }}"
    ]
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Install Azure Linux Agent (waagent) for Azure extensions
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/azure-waagent.sh"
    environment_vars = [
      "PROVISIONING_AGENT=cloud-init",
      "WAAGENT_VERSION={{ waagent_version }}"
    ]
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Install platform-specific packages (qemu-guest-agent for Azure)
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/platform-qemu.sh"
    environment_vars = [
      "PLATFORM={{ platform }}"
    ]
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Install additional packages
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/apt-install.sh"
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Configure VyOS system
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/configure.sh"
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Fix VyOS bugs (syntax errors in bash functions)
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/fix-vyos-bugs.sh"
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Fix VyOS configuration permissions
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/fix-vyattacfg-permissions.sh"
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # OS preparation
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/osprep.sh"
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Configure Azure serial console
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/azure-serial-console.sh"
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Cleanup VyOS configuration
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/cleanup-vyos-configure.sh"
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }

  # Final cleanup
  provisioner "shell" {
    script = "{{ playbook_dir }}/scripts/vyos/cleanup.sh"
    execute_command = "{{ '{{' }} .Vars {{ '}}' }} sudo -E bash '{{ '{{' }} .Path {{ '}}' }}'"
  }
}